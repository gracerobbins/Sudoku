#BlueJ class context
comment0.params=fileName
comment0.target=Board(java.lang.String)
comment0.text=\n\ \ \ Reads\ numbers\ from\ a\ puzzle\ file\ and\ created\ a\ grid\ of\ Square\ objects\ with\ those\ numbers.\ \n\ \ \ Zeros\ represent\ spaces\ that\ aren't\ filled\ in\ yet.\n
comment1.params=sq
comment1.target=void\ setPossibles(Square)
comment1.text=\n\ \ Takes\ a\ Square\ sq.\ Find\ every\ other\ nonzero\ number\ in\ that\ row\ and\ column\ and\ remove\ it\ from\ sq's\ \n\ \ list\ of\ possible\ numbers.\n\ \ For\ example,\ if\ another\ Square\ in\ that\ column\ is\ a\ 6,\ sq\ cannot\ possibly\ be\ a\ 6\ as\ well.\ So\ 6\ is\ removed\n\ \ from\ sq's\ list\ of\ possibles.\ \n
comment2.params=sq
comment2.target=void\ removeInNonet(Square)
comment2.text=\n\ \ A\ nonet\ as\ set\ of\ 9\ squares\ that\ a\ Sudoku\ board\ is\ divided\ into.\ Does\ the\ same\ thing\ as\ the\ above\ method\ but\ in\ a\ nonet\n\ \ pattern,\ instead\ of\ a\ row\ and\ column\ pattern.\n
comment3.params=sq
comment3.target=void\ checkUniquesVertically(Square)
comment3.text=\n\ \ Sometimes\ narrowing\ Squares\ down\ to\ one\ value\ is\ impossible,\ so\ a\ different\ approach\ must\ be\ taken.\ Say,\ for\ example\n\ \ a\ Square\ has\ the\ possible\ numbers\ 3,\ 4,\ and\ 8,\ and\ a\ Square\ in\ the\ same\ column\ has\ the\ possibles\ 4\ and\ 8.\ Though\ neither\n\ \ Square\ can\ be\ narrowed\ down\ to\ one\ possible\ number\ using\ the\ existing\ methods,\ we\ know\ that\ the\ first\ Square\ must\ be\n\ \ a\ 3\ because\ it's\ the\ only\ Square\ that\ can\ be\ a\ 3.\n\ \ checkUniquesVertically\ checks\ for\ numerbers\ in\ sq's\ possibles\ list\ that\ aren't\ in\ any\ other\ Square\ in\ the\ column.\n
comment4.params=sq
comment4.target=void\ checkUniquesHorizontally(Square)
comment4.text=\n\ \ Does\ the\ same\ as\ checkUniquesVertically\ but\ in\ rows\ instead\ of\ columns.\n
comment5.params=sq
comment5.target=void\ checkUniquesNonet(Square)
comment5.text=\n\ \ Does\ the\ same\ as\ checkUniquesVertically\ but\ in\ nonets\ instead\ of\ columns.\n
comment6.params=
comment6.target=void\ setAll()
comment6.text=\n\ \ Goes\ through\ each\ Square\ in\ the\ board\ and\ uses\ all\ of\ the\ above\ methods\ to\ narrow\ down\ it's\ possibleNums\ list\n
comment7.params=
comment7.target=java.lang.String\ toString()
comment8.params=
comment8.target=java.lang.String\ deBugToString()
comment9.params=
comment9.target=boolean\ solved()
comment9.text=\n\ \ returns\ true\ if\ the\ whole\ board\ has\ been\ filled\n
numComments=10
